ARG DISTRO_NAME
ARG DISTRO_VERSION
FROM $DISTRO_NAME:$DISTRO_VERSION

LABEL maintainer="javier@netmanagers.com.ar"

# Both args before the `FROM` are repeated here so that they can be used below, as required
# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG DISTRO_NAME
ARG DISTRO_VERSION
ARG SALT_INSTALL_METHOD
ARG SALT_VERSION
ARG PYTHON_VERSION
ARG EXTRA_PACKAGES=""
ARG DEBIAN_FRONTEND="noninteractive"
# Provide packages used by `kitchen-docker` to speed up testing
# These are now expected by the `ssf` customised `kitchen-docker` being used:
# - https://gitlab.com/saltstack-formulas/infrastructure/kitchen-docker/-/compare/master...ssf
ARG KITCHEN_DOCKER_PACKAGES="curl lsb-release openssh-server sudo"
ARG PKGS="${KITCHEN_DOCKER_PACKAGES} apt-transport-https dirmngr git gnupg locales net-tools procps systemd systemd-sysv udev wget ${EXTRA_PACKAGES}"

# Avoid unnecessary files when installing packages
COPY files/dpkg-nodoc /etc/dpkg/dpkg.cfg.d/01_nodoc
COPY files/apt-no-recommends /etc/apt/apt.conf.d/99synaptic

SHELL ["/bin/bash", "-x", "-o", "pipefail", "-c"]
# hadolint ignore=DL3008,DL4001
RUN apt-get update \
 && apt-get install --yes --no-install-recommends $PKGS \
 && if [ "${SALT_VERSION}" != "tiamat" ]; then \
      curl -L https://raw.githubusercontent.com/saltstack/salt-bootstrap/develop/bootstrap-salt.sh | \
      sh -s -- -XUdfPD -x python$PYTHON_VERSION $SALT_INSTALL_METHOD $SALT_VERSION; \
    else \
      CODENAME=$(grep VERSION_CODENAME /etc/os-release | cut -d= -f2); \
      # Output the `CODENAME` for debugging purposes
      echo "${CODENAME}"; \
      wget --progress=dot:giga -O - https://artifactory.saltstack.net/artifactory/api/gpg/key/public | apt-key add -; \
      echo 'deb https://artifactory.saltstack.net/artifactory/open-debian-staging '"${CODENAME}"' main' > /etc/apt/sources.list.d/saltstack.list; \
      # Output the file for debugging purposes
      cat /etc/apt/sources.list.d/saltstack.list; \
      apt-get update; \
      apt-get install --yes --no-install-recommends salt-minion; \
    fi \
    # Use temporary workaround of downgrading Jinja2 for images built using `git`
    # See https://github.com/saltstack/salt/issues/60188
 && if [ "${SALT_INSTALL_METHOD}" = "git" ] && [ "${PYTHON_VERSION}" = "3" ]; then \
      pip3 install --no-cache-dir Jinja2==2.11.3; \
    fi \
    # Disable salt's service as we don't need it running
 && systemctl disable salt-minion.service > /dev/null 2>&1 \
    # Remove unnecessary getty and udev targets that result in high CPU usage when using
    # multiple containers with Molecule or Kitchen https://github.com/ansible/molecule/issues/1104
 && rm -rf /var/cache/apt \
           /var/cache/salt \
           /var/lib/apt/lists/* \
           /lib/systemd/system/systemd*udev* \
           /lib/systemd/system/getty.target \
           /etc/default/locale /etc/locale.gen \
 && (find / ! -path "/{proc,sys,dev}" -name "*.pyc"; \
     find / ! -path "/{proc,sys,dev}" -name "__pycache__"; \
     find /var/log -type f) \
    | grep -v ^/proc | xargs rm -rf \
    # Also obscure any `getty` binaries https://github.com/moby/moby/issues/4040#issuecomment-339022455
 && cp /bin/true /sbin/agetty \
 && echo 'locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8' | debconf-set-selections - \
 && echo 'locales locales/default_environment_locale select en_US.UTF-8' | debconf-set-selections - \
 && dpkg-reconfigure -f noninteractive locales
