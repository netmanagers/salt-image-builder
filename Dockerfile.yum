ARG DISTRO_NAME
ARG DISTRO_VERSION
FROM $DISTRO_NAME:$DISTRO_VERSION

LABEL maintainer="javier@netmanagers.com.ar"

# Both args before the `FROM` are repeated here so that they can be used below, as required
# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG DISTRO_NAME
ARG DISTRO_VERSION
ARG SALT_INSTALL_METHOD
ARG SALT_VERSION
ARG PYTHON_VERSION
ARG EXTRA_PACKAGES=""
# Provide packages used by `kitchen-docker` to speed up testing
# These are now expected by the `ssf` customised `kitchen-docker` being used:
# - https://gitlab.com/saltstack-formulas/infrastructure/kitchen-docker/-/compare/master...ssf
ARG KITCHEN_DOCKER_PACKAGES="curl openssh-clients openssh-server sudo which"
ARG PKGS="${KITCHEN_DOCKER_PACKAGES} git net-tools python3-pip systemd udev ${EXTRA_PACKAGES}"

SHELL ["/bin/bash", "-x", "-o", "pipefail", "-c"]
# hadolint ignore=SC1075,SC2016,DL3033,DL3041
RUN if [[ "${DISTRO_NAME}" = "centos" ]]; then \
      # Install EPEL repo for `centos`
      yum -y install epel-release; \
    fi \
    # Workaround: `yum` is no longer available in Oracle Linux 8
 && if [ "${DISTRO_NAME}" = "oraclelinux" ] && [ "${DISTRO_VERSION}" = "8" ]; then \
      dnf install -y yum && dnf clean all; \
    fi \
 && yum -y install ${PKGS} \
 && if [ "${SALT_VERSION}" != "tiamat" ]; then \
      # Use workaround for Amazon Linux stable builds until packaging resolved (https://github.com/saltstack/salt/issues/59982)
      if [ "${DISTRO_NAME}" = "amazonlinux" ] && [ "${DISTRO_VERSION}" = "2" ] && [ "${SALT_INSTALL_METHOD}" = "stable" ]; then \
        SALT_MAJOR_VERSION=$(echo "${SALT_VERSION}" | cut -d. -f1); \
        rpm --import https://repo.saltproject.io/py3/amazon/2/x86_64/${SALT_MAJOR_VERSION}/SALTSTACK-GPG-KEY.pub; \
        curl -fsSL https://repo.saltproject.io/py3/amazon/2/x86_64/${SALT_MAJOR_VERSION}.repo | tee /etc/yum.repos.d/saltstack-py3-repo.repo; \
        yum clean expire-cache; \
        yum -y install yum-versionlock; \
        yum versionlock add python3-urllib3-0:1.23-6.amzn2.noarch; \
      fi; \
      curl -L https://raw.githubusercontent.com/saltstack/salt-bootstrap/develop/bootstrap-salt.sh | \
      sh -s -- -XUdfPD -x python$PYTHON_VERSION $SALT_INSTALL_METHOD $SALT_VERSION; \
    else \
      # TODO: Use `TIAMAT_DISTRO_NAME` for this section, to deal with trimming
      #       `linux` from the end of the name as well, as required below
      # Use `centos` packages for `oraclelinux`
      if [ "${DISTRO_NAME}" = "oraclelinux" ]; then \
        DISTRO_NAME="centos"; \
      fi; \
      rpm --import https://artifactory.saltstack.net/artifactory/api/gpg/key/public; \
      # Only need this because building on top of an existing image (`--cache-from`)
      rm -rf /etc/yum.repos.d/saltstack.repo; \
      { \
        echo '[saltstack-repo]'; \
        echo 'name=SaltStack Tiamat Release Channel for RHEL/CentOS $releasever'; \
        # Need to remove `linux` from the end of the `DISTRO_NAME` where present
        echo 'baseurl=https://artifactory.saltstack.net/artifactory/open-rpm-staging/'"${DISTRO_NAME/linux/}/${DISTRO_VERSION}"'/$basearch/'; \
        echo 'skip_if_unavailable=True'; \
        # Using `repo_gpgcheck=1` instead
        echo 'gpgcheck=0'; \
        echo 'gpgkey=https://artifactory.saltstack.net/artifactory/api/gpg/key/public'; \
        echo 'enabled=1'; \
        echo 'enabled_metadata=1'; \
        echo 'repo_gpgcheck=1'; \
      } >> /etc/yum.repos.d/saltstack.repo; \
      # Output the file for debugging purposes
      cat /etc/yum.repos.d/saltstack.repo; \
      yum clean expire-cache; \
      yum -y install salt-minion; \
    fi \
    # Use temporary workaround of downgrading Jinja2 for images built using `git`
    # See https://github.com/saltstack/salt/issues/60188
 && if [ "${SALT_INSTALL_METHOD}" = "git" ] && [ "${PYTHON_VERSION}" = "3" ]; then \
      pip3 install --no-cache-dir Jinja2==2.11.3; \
    fi \
 && if command -v systemctl; then \
      systemctl disable salt-minion.service > /dev/null 2>&1; \
    elif [ -f "/etc/init.d/salt-minion" ]; then \
      /sbin/chkconfig salt-minion off; \
    fi \
    # Remove unnecessary getty and udev targets that result in high CPU usage when using
    # multiple containers with Molecule or Kitchen (https://github.com/ansible/molecule/issues/1104)
 && rm -rf /var/cache/{salt,yum} \
           /usr/lib/systemd/system/systemd*udev* \
           /usr/lib/systemd/system/getty.target \
 && (find / ! -path "/{proc,sys,dev}" -name "*.pyc"; \
     find / ! -path "/{proc,sys,dev}" -name "__pycache__"; \
     find /var/log -type f) \
    | grep -v ^/proc | xargs rm -rf \
    # Also obscure any `getty` binaries (https://github.com/moby/moby/issues/4040#issuecomment-339022455)
 && cp /bin/true /sbin/agetty \
 && if [ -e /sbin/mingetty ]; then cp /bin/true /sbin/mingetty; fi
