ARG DISTRO_NAME
ARG DISTRO_VERSION
FROM $DISTRO_NAME:$DISTRO_VERSION

LABEL maintainer="javier@netmanagers.com.ar"

# Both args before the `FROM` are repeated here so that they can be used below, as required
# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG DISTRO_NAME
ARG DISTRO_VERSION
ARG SALT_INSTALL_METHOD
ARG SALT_VERSION
ARG PYTHON_VERSION
ARG EXTRA_PACKAGES=""
ARG PKGS="dev-vcs/git app-admin/sudo $EXTRA_PACKAGES"

SHELL ["/bin/bash", "-x", "-o", "pipefail", "-c"]
RUN emerge-webrsync \
 && emerge --noreplace --quiet ${PKGS} \
 && curl -L https://raw.githubusercontent.com/saltstack/salt-bootstrap/develop/bootstrap-salt.sh | \
    sh -s -- -XUdfP -x python$PYTHON_VERSION $SALT_INSTALL_METHOD $SALT_VERSION \
    # Generate locales
 && echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && locale-gen \
    # Enable sshd and disable salt's service as we don't need it running
 && if [ "${DISTRO_VERSION}" = "systemd" ]; then \
      ( /bin/systemctl enable sshd.service > /dev/null 2>&1; \
        /bin/systemctl disable salt-minion.service > /dev/null 2>&1 ) || true; \
    else \
      ( /sbin/rc-update add sshd default > /dev/null 2>&1; \
        /sbin/rc-update del salt-minion default > /dev/null 2>&1 ) || true; \
    fi \
    # Remove unnecessary getty and udev targets that result in high CPU usage when using
    # multiple containers with Molecule or Kitchen https://github.com/ansible/molecule/issues/1104
    # Remove portage repository, binary packages, and downloaded sources
 && rm -rf /var/cache/{salt,binpkgs,distfiles} \
           /var/db/repos/gentoo \
           /lib/systemd/system/systemd*udev* \
           /lib/systemd/system/getty.target \
 && (find / ! -path "/{proc,sys,dev}" -name "*.pyc"; \
     find / ! -path "/{proc,sys,dev}" -name "__pycache__"; \
     find /var/log -type f) | \
    grep -v ^/proc | xargs rm -rf \
    # Also obscure any `getty` binaries https://github.com/moby/moby/issues/4040#issuecomment-339022455
 && cp /bin/true /sbin/agetty \
    # Temporary fix for troublesome `log.debug` that causes Travis failures due to excess logging
    # Has been fixed upstream recently but some of our cached builds still use affected versions
    # Only affects the `master` branch builds
    # The first `find` command is to log where the actual file is located
 && find /opt/ /usr/ -type f -name loader.py | grep "salt/loader.py" \
 && sed -i -e "/log.debug(self.file_mapping)/s/debug/trace/" "$(find /opt/ /usr/ -type f -name loader.py | grep 'salt/loader.py')"
